import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:go_router/go_router.dart';
import 'package:muslimapp/models/features_model.dart';
import 'package:muslimapp/models/prayer_model.dart';
import 'package:muslimapp/models/zone_model.dart';
import 'package:muslimapp/providers/theme_provider.dart';
import 'package:muslimapp/providers/time_provider.dart';
import 'package:muslimapp/providers/prayer_provider.dart';
import 'package:muslimapp/providers/zone_provider.dart';
import 'package:muslimapp/providers/theme_test_provider.dart';
import 'package:muslimapp/services/prayer_service.dart';
import 'package:muslimapp/widgets/prayer_dynamic_background.dart';
import 'package:muslimapp/widgets/theme_test_controls.dart';

// Fungsi untuk mendapatkan prayer berdasarkan periode waktu solat yang dipilih
Prayer getPrayerForPeriod(PrayerPeriod? period, Prayer currentPrayer, Prayer nextPrayer) {
  if (period == null) {
    return currentPrayer; // Gunakan current prayer jika tidak ada periode yang dipilih
  }
  
  // Gunakan prayer yang sesuai dari prayers yang ada
  switch (period) {
    case PrayerPeriod.fajr:
      return currentPrayer.name == "Fajr" ? currentPrayer : nextPrayer.name == "Fajr" ? nextPrayer : currentPrayer;
    case PrayerPeriod.dhuhr:
      return currentPrayer.name == "Dhuhr" ? currentPrayer : nextPrayer.name == "Dhuhr" ? nextPrayer : currentPrayer;
    case PrayerPeriod.asr:
      return currentPrayer.name == "Asr" ? currentPrayer : nextPrayer.name == "Asr" ? nextPrayer : currentPrayer;
    case PrayerPeriod.maghrib:
      return currentPrayer.name == "Maghrib" ? currentPrayer : nextPrayer.name == "Maghrib" ? nextPrayer : currentPrayer;
    case PrayerPeriod.isha:
      return currentPrayer.name == "Isha" ? currentPrayer : nextPrayer.name == "Isha" ? nextPrayer : currentPrayer;
    // Default: gunakan prayer saat ini untuk periode lainnya
    default:
      return currentPrayer;
  }
}

class HomeScreen extends ConsumerWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final dailyPrayersAsync = ref.watch(prayerDataProvider);
    final selectedZoneCode = ref.watch(zoneProvider);
    final allZones = esolatZones;

    return dailyPrayersAsync.when(
      data: (prayerData) {
        final nextPrayer = getNextPrayer(
          TimeOfDay.fromDateTime(DateTime.now()),
          prayerData.dailyPrayers,
        );
        final currentPrayer = getCurrentPrayer(
          TimeOfDay.fromDateTime(DateTime.now()),
          prayerData.dailyPrayers,
        );
        final selectedZone = allZones.firstWhere(
          (zone) => zone.code == selectedZoneCode,
          orElse: () => EsolatZone(code: '?', state: '', description: ''),
        );
        final zonDesc = selectedZone.description;

        return PrayerDynamicBackground(
          child: SafeArea(
            child: LayoutBuilder(
              builder: (context, constraints) {
                return SingleChildScrollView(
                  child: ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight: constraints.maxHeight,
                    ),
                    // Use transparent container to make sure background is visible
                    child: Container(
                      color: Colors.transparent,
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 20.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            _buildHeader(ref),
                            const SizedBox(height: 24),
                            _buildNextPrayerCard(context, nextPrayer, zonDesc, currentPrayer),
                            const SizedBox(height: 32),
                            _buildDailyPrayerList(context, prayerData.dailyPrayers, nextPrayer),
                            const SizedBox(height: 24),
                            // Theme test panel for developers
                            const ThemeTestControls(),
                            const SizedBox(height: 24),
                            const Text(
                              'Features',
                              style: TextStyle(
                                fontSize: 24,
                                fontWeight: FontWeight.bold,
                                color: Color(0xFF1E3A8A),
                              ),
                            ),
                            const SizedBox(height: 10),
                            _buildFeaturesList(),
                            const SizedBox(height: 24),
                          ],
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (err, stack) => Center(child: Text('Gagal memuatkan data: $err')),
    );
  }

  Widget _buildHeader(WidgetRef ref) {
    final currentTimeAsync = ref.watch(currentTimeProvider);
    final currentTime = currentTimeAsync.valueOrNull ?? DateTime.now();
    final formattedTime = DateFormat('HH:mm:ss').format(currentTime);

    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.access_time, size: 16),
            const SizedBox(width: 4),
            Text(
              formattedTime,
              style: const TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Color(0xFF1E3A8A),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Text(
          DateFormat('EEEE, d MMMM y').format(currentTime),
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: Color(0xFF1E3A8A),
          ),
        ),
      ],
    );
  }

  Widget _buildNextPrayerCard(BuildContext context, Prayer nextPrayer, String zonDesc, Prayer currentPrayer) {
    final formattedTime = '${nextPrayer.time.hour.toString().padLeft(2, '0')}:${nextPrayer.time.minute.toString().padLeft(2, '0')}';
    
    return Consumer(
      builder: (context, ref, _) {
        // Ambil test prayer period dari provider
        final testPrayerPeriod = ref.watch(testPrayerPeriodProvider);
        
        // Tentukan prayer yang akan digunakan untuk warna
        final Prayer prayerForTheme = getPrayerForPeriod(testPrayerPeriod, currentPrayer, nextPrayer);
        
        return Material(
          color: Colors.transparent,
          borderRadius: BorderRadius.circular(24),
          child: InkWell(
            borderRadius: BorderRadius.circular(24),
            onTap: () {
              context.go('/prayer-info/${nextPrayer.name}', extra: nextPrayer);
            },
            child: Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: prayerForTheme.colors,  // Menggunakan warna dari prayer berdasarkan tema yang dipilih
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(24),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.15),
                    blurRadius: 20,
                    offset: const Offset(0, 10),
                  )
                ],
              ),
              child: Column(
                children: [
                  // Baris untuk judul
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Solat Seterusnya',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    nextPrayer.name,
                    style: const TextStyle(
                      fontSize: 40,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    formattedTime,
                    style: const TextStyle(
                      fontSize: 24,
                      color: Colors.white70,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    zonDesc,
                    style: const TextStyle(
                      fontSize: 14,
                      color: Colors.white70,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      }
    );
  }

  Widget _buildDailyPrayerList(BuildContext context, List<Prayer> dailyPrayers, Prayer nextPrayer) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: dailyPrayers.map((prayer) {
        return Expanded(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 4),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(15),
                onTap: () {
                  // Navigasi ke skrin maklumat solat yang baru
                  context.go('/prayer-info/${prayer.name}', extra: prayer);
                },
                child: _buildPrayerItem(prayer, nextPrayer),
              ),
            ),
          ),
        );
      }).toList(),
    );
  }

  Widget _buildPrayerItem(Prayer prayer, Prayer nextPrayer) {
    final isNext = prayer.name == nextPrayer.name;
    final hour = prayer.time.hour.toString().padLeft(2, '0');
    final minute = prayer.time.minute.toString().padLeft(2, '0');

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
      decoration: BoxDecoration(
        color: isNext ? Colors.white.withOpacity(0.85) : Colors.white.withOpacity(0.3),
        borderRadius: BorderRadius.circular(15),
        boxShadow: isNext
            ? [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  offset: const Offset(0, 5),
                )
              ]
            : null,
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            prayer.name,
            style: TextStyle(
              fontSize: 12,
              fontWeight: isNext ? FontWeight.bold : FontWeight.normal,
              color: isNext ? Colors.black : Colors.white,
            ),
            textAlign: TextAlign.center,
            overflow: TextOverflow.ellipsis,
          ),
          const SizedBox(height: 4),
          Text(
            '$hour:$minute',
            style: TextStyle(
              fontSize: 12,
              fontWeight: isNext ? FontWeight.bold : FontWeight.normal,
              color: isNext ? Colors.black : Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFeaturesList() {
    final List<Feature> features = [
      const Feature(icon: Icons.menu_book, label: "Doa"),
      const Feature(icon: Icons.book, label: "Al-Quran"),
      const Feature(icon: Icons.explore, label: "Kiblat"),
      const Feature(icon: Icons.access_time, label: "Haji"),
      const Feature(icon: Icons.menu_book, label: "Tasbih"),
      const Feature(icon: Icons.book, label: "Halal Finder"),
      const Feature(icon: Icons.explore, label: "Meditation"),
      const Feature(icon: Icons.access_time, label: "Mathurat"),
    ];
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 10),
          )
        ],
      ),
      child: GridView.count(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        crossAxisCount: 4,
        mainAxisSpacing: 18,
        crossAxisSpacing: 18,
        children: features.map((feature) {
          return _buildFeatureIcon(feature.icon, feature.label);
        }).toList(),
      ),
    );
  }

  Widget _buildFeatureIcon(IconData icon, String label) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, size: 28),
        const SizedBox(height: 8),
        Flexible(
          child: Text(
            label,
            textAlign: TextAlign.center,
            overflow: TextOverflow.ellipsis,
            style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500),
          ),
        ),
      ],
    );
  }
}